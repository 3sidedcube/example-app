name: Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

concurrency:
  group: release

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - id: release
        name: Run release-please
        uses: googleapis/release-please-action@v4
        with:
          config-file: ".github/prerelease-config.json"
          manifest-file: ".github/prerelease-manifest.json"
          fork: false
          token: ${{ secrets.GITHUB_TOKEN }}
  
  update-manifest-in-pr:
    runs-on: ubuntu-latest
    needs: release-please
    # Only run when a release PR is opened or updated, not when it's merged
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref == 'release-please--branches--main' && github.event.pull_request.closed == false }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract new version
        id: extract-version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ $PR_TITLE =~ chore\(main\):[[:space:]]release[[:space:]]([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=" >> $GITHUB_OUTPUT
          fi
      
      - name: Update prerelease manifest with new version
        if: ${{ steps.extract-version.outputs.version != '' }}
        env:
          MANIFEST_PATH: .github/prerelease-manifest.json
          VERSION: ${{ steps.extract-version.outputs.version }}
        run: |
          jq --arg tag "$VERSION" '.["."] = $tag' $MANIFEST_PATH > temp.json \
            && mv temp.json $MANIFEST_PATH
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $MANIFEST_PATH
          git commit -m "chore: update prerelease manifest with version $VERSION"
          git push

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    environment: test
    if: ${{ needs.release-please.outputs.releases_created == 'false' }}
    needs: release-please
    steps:
      - name: Configure
        run: |
          echo "${{ vars.EXAMPLE_VAR }}"
          echo "${{ secrets.EXAMPLE_SECRET }}"

      - name: Deploy
        run: echo "Deploying to test!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: ${{ needs.release-please.outputs.releases_created == 'true' && contains(needs.release-please.outputs.tag_name, 'beta') }}
    needs: release-please
    steps:
      - name: Configure
        run: |
          echo "${{ vars.EXAMPLE_VAR }}"
          echo "${{ secrets.EXAMPLE_SECRET }}"

      - name: Deploy
        run: echo "Deploying to staging!"

      - name: Run release-please
        uses: googleapis/release-please-action@v4
        with:
          config-file: ".github/release-config.json"
          manifest-file: ".github/release-manifest.json"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: ${{ needs.release-please.outputs.releases_created == 'true' && !contains(needs.release-please.outputs.tag_name, 'beta') }}
    needs: release-please
    steps:
      - name: Configure
        run: |
          echo "${{ vars.EXAMPLE_VAR }}"
          echo "${{ secrets.EXAMPLE_SECRET }}"

      - name: Deploy
        run: echo "Deploying to production!"
        
  sync-after-release:
    name: Sync Release Manifest
    runs-on: ubuntu-latest
    # Only run when a release is created and PR is merged (push to main)
    if: ${{ github.event_name == 'push' && needs.release-please.outputs.releases_created == 'true' }}
    needs: release-please
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}  # Use a token with repo scope
      
      - name: Update prerelease manifest
        env:
          MANIFEST_PATH: .github/prerelease-manifest.json
          RELEASE_TAG: ${{ needs.release-please.outputs.tag_name }}
        run: |
          # Remove the 'v' prefix if present
          VERSION="${RELEASE_TAG//v/}"
          
          jq --arg tag "$VERSION" '.["."] = $tag' $MANIFEST_PATH > temp.json \
            && mv temp.json $MANIFEST_PATH
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $MANIFEST_PATH
          git commit -m "chore: sync prerelease manifest with version $VERSION"
          git push

  publish:
    name: Publish images
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-production
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Configure
        run: |
          echo "${{ vars.EXAMPLE_VAR }}"
          echo "${{ secrets.EXAMPLE_SECRET }}"

      - name: Build
        run: echo "Building for '${{ matrix.arch }}' ..."

      - name: Publish
        run: echo "Publishing for '${{ matrix.arch }}' ..."